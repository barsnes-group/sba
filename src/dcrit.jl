using LinearAlgebra

# Calculate D-optimality for a given allocation matrix.  Assumes a
# model with a single variable, where topleft and bottomright are
# generated by the functions makeTopLeft and makeBottomRight. The
# allocation matrix should be of size (B, T) where B is the number of
# batches and T is the number of treatments.

# higher is better
function dcrit(allom::Array{<:Integer}, topleft::Array{<:Integer}, bottomright::Array{<:Integer})
    det(infomat(allom, topleft, bottomright))
end

function makeTopLeft(samplesizes::Array{<:Integer})
    sminone = length(samplesizes)-1
    a = samplesizes[2:end]
    b = zeros(Int, (sminone, sminone))
    b[diagind(b)] .= a
    hcat(vcat(sum(samplesizes), a), vcat(transpose(a), b))
end

function makeBottomRight(batchsizes::Array{<:Integer})
    bminone = length(batchsizes)-1
    bottomright = zeros(Int, (bminone, bminone))
    bottomright[diagind(bottomright)] .= batchsizes[2:end]
    bottomright
end

function infomat(allom::Array{<:Integer}, topleft::Array{<:Integer}, bottomright::Array{<:Integer})
    bottomleft = hcat(dropdims(sum(allom, dims=2), dims=2)[2:end],
                      allom[2:end, 2:end])
    hcat(vcat(topleft, bottomleft),
         vcat(transpose(bottomleft), bottomright))
end
